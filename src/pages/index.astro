---
import Layout from '../layouts/Layout.astro';
import JadeTitle from '../components/JadeTitle.astro';
import JadeSlogan from '../components/JadeSlogan.astro';
import Counter from "../react/Counter.tsx";
import ProgressBar from "../react/ProgressBar";
import JadeDescription from '../components/JadeDescription.astro';
import JadeNotifyInput from '../components/JadeNotifyInput.astro';
import JadeButton from '../components/JadeButton.astro';
import MoreInformation from '../components/MoreInformation.astro';
const date = import.meta.env.PUBLIC_DATE as string;
const effect = import.meta.env.PUBLIC_EFFECT as string;
---
<Layout title="Jade Coming Soon Template">
	<main class="z-10">
		<div class="w-[100vw] h-[100vh] bg-star-bg color text-semantic flex flex-col justify-center text-center">
			<canvas class="w-[100vw] h-[100vh] absolute top-0 left-0" id="background"></canvas>
			<div class="z-10 w-[100%] md:w-[50%] md:flex md:flex-col md:mx-auto lg:w-[600px]">
				<JadeTitle>Coming Soon</JadeTitle>
				<JadeSlogan>Â¡We're working hard in something amazing!</JadeSlogan>
				<Counter date={date} client:only="react"/>
				<ProgressBar percentage={35}/>
				<JadeDescription/>
				<JadeNotifyInput/>
				<div class="mt-10 text-center z-10">
					<JadeButton type="primary" id="btn-show-information"/>
				</div>
			</div>
		</div>
		<MoreInformation/>
	</main>
</Layout>
<script is:inline define:vars={{effect}}>
	(() => {
		// It can be stars|bubbles|dots
		let background_type = effect;

		let moreInformation = document.getElementById('more-information');
		let btnShowInformation = document.getElementById('btn-show-information');
		let btnCloseMoreInformation = document.getElementById('btn-close-more-information');
		btnShowInformation.addEventListener('click', function(){
			moreInformation.classList.remove('hidden');
			moreInformation.classList.add('animate__animated');
			moreInformation.classList.add('animate__fadeIn');
		});
		btnCloseMoreInformation.addEventListener('click', function(){
			moreInformation.classList.add('hidden');
			moreInformation.classList.remove('animate__animated');
			moreInformation.classList.remove('animate__fadeIn');
		});

		if(background_type === 'stars')
		{
			let canvas= document.getElementById('background');
			var ctx = canvas.getContext("2d");
			var W = window.innerWidth;
			var H = window.innerHeight;
			//Set Canvas and Background Color;
			canvas.width = W;
			canvas.height = H;
			ctx.fillStyle = "rgba(0, 0, 0, 0.5)";
			ctx.fillRect(0, 0, W, H);
			//Glow effect;
			ctx.shadowBlur = 10;
			ctx.shadowColor = "white";
			function animate() {
				//Random position and size of stars;
				let x = W * Math.random();
				let y = H * Math.random();
				let r = 2.5 * Math.random();
				//Draw the stars;
				ctx.beginPath();
				ctx.fillStyle = "white";
				ctx.arc(x, y, r, 0, Math.PI * 2);
				ctx.fill();
				//Using setTimeout instead of window.requestAnimationFrame for slower speed... window.requestAnimationFrame is approximately equal to setTimeout(func, 17);
				setTimeout(animate, 700);
			}
			animate();
		}
		else if (background_type === 'bubbles')
		{
			const rand = function(min, max) {
				return Math.random() * ( max - min ) + min;
			}

			let canvas = document.getElementById('background');
			let ctx = canvas.getContext('2d');

			canvas.width = window.innerWidth;
			canvas.height = window.innerHeight;

			window.addEventListener('resize', function() {
				canvas.width = window.innerWidth;
				canvas.height = window.innerHeight;
				ctx = canvas.getContext('2d');
				ctx.globalCompositeOperation = 'lighter';
			});
			let backgroundColors = [ '#000', '#000' ];
			let colors = [
				[ '#002aff', "#009ff2" ],
				[ '#0054ff', '#27e49b' ],
				[ '#202bc5' ,'#873dcc' ]
			];
			let count = 70;
			let blur = [ 12, 70 ];
			let radius = [ 1, 120 ];

			ctx.clearRect( 0, 0, canvas.width, canvas.height );
			ctx.globalCompositeOperation = 'lighter';

			let grd = ctx.createLinearGradient(0, canvas.height, canvas.width, 0);
			grd.addColorStop(0, backgroundColors[0]);
			grd.addColorStop(1, backgroundColors[1]);
			ctx.fillStyle = grd;
			ctx.fillRect(0, 0, canvas.width, canvas.height);

			let items = [];

			while(count--) {
				let thisRadius = rand( radius[0], radius[1] );
				let thisBlur = rand( blur[0], blur[1] );
				let x = rand( -100, canvas.width + 100 );
				let y = rand( -100, canvas.height + 100 );
				let colorIndex = Math.floor(rand(0, 299) / 100);
				let colorOne = colors[colorIndex][0];
				let colorTwo = colors[colorIndex][1];

				ctx.beginPath();
				ctx.filter = `blur(${thisBlur}px)`;
				let grd = ctx.createLinearGradient(x - thisRadius / 2, y - thisRadius / 2, x + thisRadius, y + thisRadius);

				grd.addColorStop(0, colorOne);
				grd.addColorStop(1, colorTwo);
				ctx.fillStyle = grd;
				ctx.fill();
				ctx.arc( x, y, thisRadius, 0, Math.PI * 2 );
				ctx.closePath();

				let directionX = Math.round(rand(-99, 99) / 100);
				let directionY = Math.round(rand(-99, 99) / 100);

				items.push({
					x: x,
					y: y,
					blur: thisBlur,
					radius: thisRadius,
					initialXDirection: directionX,
					initialYDirection: directionY,
					initialBlurDirection: directionX,
					colorOne: colorOne,
					colorTwo: colorTwo,
					gradient: [ x - thisRadius / 2, y - thisRadius / 2, x + thisRadius, y + thisRadius ],
				});
			}
			function changeCanvas() {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				let adjX = 2;
				let adjY = 2;
				let adjBlur = 1;
				items.forEach(function(item) {

					if(item.x + (item.initialXDirection * adjX) >= canvas.width && item.initialXDirection !== 0 || item.x + (item.initialXDirection * adjX) <= 0 && item.initialXDirection !== 0) {
						item.initialXDirection = item.initialXDirection * -1;
					}
					if(item.y + (item.initialYDirection * adjY) >= canvas.height && item.initialYDirection !== 0 || item.y + (item.initialYDirection * adjY) <= 0 && item.initialYDirection !== 0) {
						item.initialYDirection = item.initialYDirection * -1;
					}

					if(item.blur + (item.initialBlurDirection * adjBlur) >= radius[1] && item.initialBlurDirection !== 0 || item.blur + (item.initialBlurDirection * adjBlur) <= radius[0] && item.initialBlurDirection !== 0) {
						item.initialBlurDirection *= -1;
					}

					item.x += (item.initialXDirection * adjX);
					item.y += (item.initialYDirection * adjY);
					item.blur += (item.initialBlurDirection * adjBlur);
					ctx.beginPath();
					ctx.filter = `blur(${item.blur}px)`;
					let grd = ctx.createLinearGradient(item.gradient[0], item.gradient[1], item.gradient[2], item.gradient[3]);
					grd.addColorStop(0, item.colorOne);
					grd.addColorStop(1, item.colorTwo);
					ctx.fillStyle = grd;
					ctx.arc( item.x, item.y, item.radius, 0, Math.PI * 2 );
					ctx.fill();
					ctx.closePath();

				});
				window.requestAnimationFrame(changeCanvas);
			}
			window.requestAnimationFrame(changeCanvas);
		}
		else if(background_type === 'dots')
		{
			let banner = document.querySelector('body');
			let canvas = document.getElementById('background');
			canvas.width = canvas.offsetWidth;
			canvas.height = canvas.offsetHeight;
			const ctx = canvas.getContext('2d');
			let dots = [];
			const arrayColors = ['#eee', '#545454', '#596d91', '#bb5a68', '#696541'];
			for (let index = 0; index < 50; index++) {
				dots.push({
					x:  Math.floor(Math.random() * canvas.width),
					y:  Math.floor(Math.random() * canvas.height),
					size: Math.random() * 3 + 5,
					color: arrayColors[Math.floor(Math.random()* 5)]
				});
			}
			const drawDots = () => {
				dots.forEach(dot => {
					ctx.fillStyle = dot.color;
					ctx.beginPath();
					ctx.arc(dot.x, dot.y, dot.size, 0, Math.PI*2);
					ctx.fill();
				})
			}
			drawDots();
			banner.addEventListener('mousemove', (event) => {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				drawDots();
				let mouse = {
					x:  event.pageX - banner.getBoundingClientRect().left,
					y:  event.pageY - banner.getBoundingClientRect().top
				}
				dots.forEach(dot => {
					let distance = Math.sqrt((mouse.x - dot.x) ** 2 + (mouse.y - dot.y) ** 2);
					if(distance < 300){
						ctx.strokeStyle = dot.color;
						ctx.lineWidth = 1;
						ctx.beginPath();
						ctx.moveTo(dot.x, dot.y);
						ctx.lineTo(mouse.x, mouse.y);
						ctx.stroke();
					}
				})
			})
			banner.addEventListener('mouseout', () => {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				drawDots();
			})
			window.addEventListener('resize', () => {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				canvas.width = banner.offsetWidth;
				canvas.height = banner.offsetHeight;

				dots = [];
				for (let index = 0; index < 50; index++) {
					dots.push({
						x:  Math.floor(Math.random() * canvas.width),
						y:  Math.floor(Math.random() * canvas.height),
						size: Math.random() * 3 + 5,
						color: arrayColors[Math.floor(Math.random()* 5)]
					});
				}
				drawDots();
			})
		}


	})();
</script>